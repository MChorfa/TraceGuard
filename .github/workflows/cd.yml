name: Continuous Deployment

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
    - uses: actions/checkout@v2
    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    - name: Run tests
      run: |
        cargo test --verbose
        cd cli && go test ./...
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/postgres

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    - name: Build
      run: cargo build --verbose
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: '1.20'
    - name: Build CLI
      run: |
        cd cli
        go build -o traceguard
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'
    - name: Install web UI dependencies
      run: |
        cd web_ui
        npm ci
    - name: Build web UI
      run: |
        cd web_ui
        npm run build
    - name: Build Docker image
      run: docker build -t ghcr.io/mchorfa/traceguard:${{ github.sha }} .
    - name: Log in to GitHub Container Registry
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
    - name: Push Docker image
      run: docker push ghcr.io/mchorfa/traceguard:${{ github.sha }}

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Deploy to development environment
      run: |
        # Add deployment script for development environment
        echo "Deploying to development environment"
    - name: Deploy to staging environment
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        # Add deployment script for staging environment
        echo "Deploying to staging environment"
    - name: Deploy to production environment
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        # Add deployment script for production environment
        echo "Deploying to production environment"
    - name: Use TraceGuard CLI for deployment
      run: |
        ./cli/traceguard deploy ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}